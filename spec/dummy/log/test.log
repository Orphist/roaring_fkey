  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 07:41:50.619831' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106063324)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.7ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106063324'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106063324)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106063324') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106074155)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074155') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106074156)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074156') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074159') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:42:01.070022', '2024-11-06 07:42:01.070022') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:42:01.079487', '2024-11-06 07:42:01.079487') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 07:42:01.082477', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.7ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074159'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:42:03.172881', '2024-11-06 07:42:03.172881') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:42:03.183666', '2024-11-06 07:42:03.183666') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074225)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074225'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074225)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074225') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 07:42:34.541842' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074225)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074225'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074225)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074225') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106074238)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074238') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106074239)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074239') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074241)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074241') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:42:43.760079', '2024-11-06 07:42:43.760079') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:42:43.769494', '2024-11-06 07:42:43.769494') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 07:42:43.772492', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074241)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074241'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (2.0ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (1.8ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:42:45.849171', '2024-11-06 07:42:45.849171') RETURNING "id"[0m
  [1m[36mTRANSACTION (4.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (2.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (3.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:42:45.867044', '2024-11-06 07:42:45.867044') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106074516)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074516') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.9ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106074517)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074517') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 07:45:18.309860' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074519)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074519') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:45:21.372944', '2024-11-06 07:45:21.372944') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:45:21.383022', '2024-11-06 07:45:21.383022') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 07:45:21.385669', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106074519)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074519'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 07:45:23.425798', '2024-11-06 07:45:23.425798') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 07:45:23.434194', '2024-11-06 07:45:23.434194') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074512)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074512'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074512)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074512') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074512)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106074512'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106074512)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106074512') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106081711)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081711') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106081712)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081712') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:17:13.676986' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106081714)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081714') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:17:16.930434', '2024-11-06 08:17:16.930434') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:17:16.940783', '2024-11-06 08:17:16.940783') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:17:16.944321', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.1ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.8ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106081714)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106081714'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:17:19.132019', '2024-11-06 08:17:19.132019') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:17:19.141881', '2024-11-06 08:17:19.141881') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (1.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (2.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (3.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (10.0ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (2.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106075018)
  [1m[36mTRANSACTION (4.7ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (4.0ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106075018'[0m
  [1m[36mTRANSACTION (12.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (7.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106075018)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106075018') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106081807)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081807') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106081809)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081809') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:18:10.055084' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106081811)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081811') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:18:13.169770', '2024-11-06 08:18:13.169770') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:18:13.178527', '2024-11-06 08:18:13.178527') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:18:13.181334', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106081811)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106081811'[0m
  [1m[36mTRANSACTION (5.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:18:15.225791', '2024-11-06 08:18:15.225791') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:18:15.236007', '2024-11-06 08:18:15.236007') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106081806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106081806'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106081806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106081806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106081806'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106081806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0211
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106081806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106082847)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106082847') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106082848)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106082848') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:28:49.808385' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106082850)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106082850') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:28:52.833550', '2024-11-06 08:28:52.833550') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:28:52.842805', '2024-11-06 08:28:52.842805') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:28:52.845364', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106082850)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106082850'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:28:54.845772', '2024-11-06 08:28:54.845772') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:28:54.854504', '2024-11-06 08:28:54.854504') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106083334)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083334') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106083335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:33:36.068270' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106083337)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083337') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:33:39.153575', '2024-11-06 08:33:39.153575') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:33:39.162555', '2024-11-06 08:33:39.162555') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:33:39.165634', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106083337)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106083337'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:33:41.204108', '2024-11-06 08:33:41.204108') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:33:41.213993', '2024-11-06 08:33:41.213993') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106083332'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083332') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106083332'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083332') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:34:52.622886' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (4.8ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (19.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (23.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (29.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (21.9ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (4.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (6.5ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (8.0ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (10.8ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106083332'[0m
  [1m[36mTRANSACTION (19.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106083332)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083332') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106083457)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083457') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106083458)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083458') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106083500)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083500') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:35:02.496979', '2024-11-06 08:35:02.496979') RETURNING "id"[0m
  [1m[36mTRANSACTION (2.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (1.1ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:35:02.508861', '2024-11-06 08:35:02.508861') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:35:02.512691', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106083500)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106083500'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:35:04.559634', '2024-11-06 08:35:04.559634') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:35:04.569327', '2024-11-06 08:35:04.569327') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:52:08.540046' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085212)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085212') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085213)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085213') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085215)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:52:17.751767', '2024-11-06 08:52:17.751767') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:52:17.761136', '2024-11-06 08:52:17.761136') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:52:17.763913', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085215'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:52:19.813182', '2024-11-06 08:52:19.813182') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:52:19.822032', '2024-11-06 08:52:19.822032') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:53:12.609331' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085313)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085313') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085314)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085314') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085316)
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085316') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:19.007983', '2024-11-06 08:53:19.007983') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:19.017871', '2024-11-06 08:53:19.017871') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:53:19.020732', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085316)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085316'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:21.093639', '2024-11-06 08:53:21.093639') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:21.104446', '2024-11-06 08:53:21.104446') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085327)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085327') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085328)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085328') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:53:29.726217' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085330)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085330') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:32.917714', '2024-11-06 08:53:32.917714') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:32.927618', '2024-11-06 08:53:32.927618') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:53:32.930671', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085330)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085330'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:34.995611', '2024-11-06 08:53:34.995611') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:35.006008', '2024-11-06 08:53:35.006008') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085342)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085342') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085343)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085343') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:53:44.513095' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085345)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085345') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:47.675954', '2024-11-06 08:53:47.675954') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:47.687155', '2024-11-06 08:53:47.687155') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:53:47.699872', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085345)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085345'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:53:49.745165', '2024-11-06 08:53:49.745165') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:53:49.754131', '2024-11-06 08:53:49.754131') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085430)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085430') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085432)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085432') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:54:33.048024' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085434)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085434') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:54:36.147720', '2024-11-06 08:54:36.147720') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:54:36.157193', '2024-11-06 08:54:36.157193') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:54:36.160410', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085434)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085434'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:54:38.202574', '2024-11-06 08:54:38.202574') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:54:38.211526', '2024-11-06 08:54:38.211526') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:55:34.759363' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085539)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085539') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085540)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085540') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085542)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085542') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:55:44.975783', '2024-11-06 08:55:44.975783') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:55:44.986648', '2024-11-06 08:55:44.986648') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:55:44.989533', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085542)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085542'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:55:47.059370', '2024-11-06 08:55:47.059370') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:55:47.069584', '2024-11-06 08:55:47.069584') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085604)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085604') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085605)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085605') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:56:06.173781' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085607)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085607') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:56:09.302834', '2024-11-06 08:56:09.302834') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:56:09.322041', '2024-11-06 08:56:09.322041') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:56:09.325139', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.6ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085607)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085607'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:56:11.394684', '2024-11-06 08:56:11.394684') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:56:11.404731', '2024-11-06 08:56:11.404731') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106085751)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085751') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 08:57:52.661389' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106085751)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085751'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106085751)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085751') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106085758)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085758') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106085759)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085759') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085802)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106085802') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:58:04.054822', '2024-11-06 08:58:04.054822') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:58:04.063976', '2024-11-06 08:58:04.063976') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 08:58:04.067726', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106085802)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106085802'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 08:58:06.104726', '2024-11-06 08:58:06.104726') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 08:58:06.114612', '2024-11-06 08:58:06.114612') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090153') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090154)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090154') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:01:55.368907' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090156)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090156') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:01:58.461516', '2024-11-06 09:01:58.461516') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:01:58.471274', '2024-11-06 09:01:58.471274') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:01:58.474279', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090156)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090156'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:02:00.505962', '2024-11-06 09:02:00.505962') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:02:00.515427', '2024-11-06 09:02:00.515427') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090205)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090205') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090205)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090205'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090205)
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.7ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090205') RETURNING "version"[0m
  [1m[36mTRANSACTION (2.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.1ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090205)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090205'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090256)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090256') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090257)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090257') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:02:58.849149' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090259)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090259') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:03:01.947225', '2024-11-06 09:03:01.947225') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:03:01.956603', '2024-11-06 09:03:01.956603') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:03:01.960373', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (9.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090259)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090259'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:03:04.042192', '2024-11-06 09:03:04.042192') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:03:04.052036', '2024-11-06 09:03:04.052036') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090309)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090309') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090309)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090309'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090309)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090309') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106090309)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090309'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:03:30.157882' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090336)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090336') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090337)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090337') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090339)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090339') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:03:41.521247', '2024-11-06 09:03:41.521247') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:03:41.532007', '2024-11-06 09:03:41.532007') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:03:41.535390', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090339)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090339'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:03:43.598398', '2024-11-06 09:03:43.598398') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:03:43.607842', '2024-11-06 09:03:43.607842') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:05:01.031995' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090507)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090507') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090508)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090508') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090510)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090510') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:05:12.197044', '2024-11-06 09:05:12.197044') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:05:12.206585', '2024-11-06 09:05:12.206585') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:05:12.209150', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090510)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090510'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:05:14.242787', '2024-11-06 09:05:14.242787') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:05:14.252429', '2024-11-06 09:05:14.252429') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090625)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090625') RETURNING "version"[0m
  [1m[36mTRANSACTION (7.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090626)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (7.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090626') RETURNING "version"[0m
  [1m[36mTRANSACTION (2.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:06:27.209057' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090628)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090628') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:06:30.264075', '2024-11-06 09:06:30.264075') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:06:30.273570', '2024-11-06 09:06:30.273570') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:06:30.276187', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090628)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090628'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:06:32.268249', '2024-11-06 09:06:32.268249') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:06:32.277206', '2024-11-06 09:06:32.277206') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.2ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106090706)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090706') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106090707)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090707') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:07:08.808632' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090709)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106090709') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:07:11.847642', '2024-11-06 09:07:11.847642') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:07:11.857051', '2024-11-06 09:07:11.857051') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:07:11.860082', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106090709)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106090709'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:07:13.865476', '2024-11-06 09:07:13.865476') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:07:13.874508', '2024-11-06 09:07:13.874508') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.5ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5035.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:15:36.243159' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect roaring_fkey_version()[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106091540)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106091540') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106091541)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106091541') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (4.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106091543)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106091543') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:15:45.465624', '2024-11-06 09:15:45.465624') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:15:45.475281', '2024-11-06 09:15:45.475281') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:15:45.478926', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106091543)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106091543'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:15:47.508033', '2024-11-06 09:15:47.508033') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:15:47.517887', '2024-11-06 09:15:47.517887') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5034.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:21:48.197838' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241106082545)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106082545') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyUpdate0216 (20241106083301)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106083301') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241106084246)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106084246') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106092813)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092813') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106092814)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092814') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:28:15.236979' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106092816)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092816') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:28:18.495387', '2024-11-06 09:28:18.495387') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:28:18.504681', '2024-11-06 09:28:18.504681') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:28:18.507545', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106092816)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106092816'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:28:20.574081', '2024-11-06 09:28:20.574081') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:28:20.583041', '2024-11-06 09:28:20.583041') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106092927)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092927') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106092928)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092928') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:29:29.151048' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106092930)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106092930') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:29:32.208073', '2024-11-06 09:29:32.208073') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:29:32.218536', '2024-11-06 09:29:32.218536') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:29:32.221368', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106092930)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106092930'[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.2ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:29:34.265443', '2024-11-06 09:29:34.265443') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:29:34.274067', '2024-11-06 09:29:34.274067') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mselect 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093006)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093006') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093007)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093007') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:30:08.578605' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093009)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093009') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.8ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:30:11.669670', '2024-11-06 09:30:11.669670') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:30:11.680773', '2024-11-06 09:30:11.680773') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:30:11.684141', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.7ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093009)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093009'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:30:13.727994', '2024-11-06 09:30:13.727994') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:30:13.736965', '2024-11-06 09:30:13.736965') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093018)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093018') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mselect 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093018)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.8ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093018'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mselect 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093018)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093018') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093408)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093408') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093409)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093409') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:34:10.728695' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093411)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093411') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:34:13.802719', '2024-11-06 09:34:13.802719') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:34:13.812089', '2024-11-06 09:34:13.812089') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:34:13.814823', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093411)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093411'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:34:15.809076', '2024-11-06 09:34:15.809076') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:34:15.818262', '2024-11-06 09:34:15.818262') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093421)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093421') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093421)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093421'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093421)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093421') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093507)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093507') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:35:08.366929' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093507)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093507'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT exists(select * from pg_proc where proname = 'roaring_fkey_version');[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093507)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093507') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093507)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093507'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093507)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093507') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093518)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093518') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093519)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093519') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093521)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093521') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:35:23.748200', '2024-11-06 09:35:23.748200') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:35:23.757126', '2024-11-06 09:35:23.757126') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:35:23.760219', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093521)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093521'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:35:25.791518', '2024-11-06 09:35:25.791518') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:35:25.800613', '2024-11-06 09:35:25.800613') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093748)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093748') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:37:49.803160' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093748)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093748'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093748)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093748') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093748)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093748'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093748)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093748') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093800)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093800') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093801)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093801') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093803)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093803') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:38:05.181300', '2024-11-06 09:38:05.181300') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:38:05.190958', '2024-11-06 09:38:05.190958') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:38:05.194187', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093803)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093803'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:38:07.211127', '2024-11-06 09:38:07.211127') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:38:07.220078', '2024-11-06 09:38:07.220078') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093845)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093845') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:38:46.357692' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093845)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093845'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093845)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093845') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093852)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093852') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093853)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093853') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093855)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093855') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:38:57.862743', '2024-11-06 09:38:57.862743') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:38:57.882251', '2024-11-06 09:38:57.882251') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.6ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:38:57.885836', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093855)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093855'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:38:59.938473', '2024-11-06 09:38:59.938473') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:38:59.948694', '2024-11-06 09:38:59.948694') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106093928)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093928') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106093930)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093930') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:39:31.063570' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093932)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093932') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:39:34.268906', '2024-11-06 09:39:34.268906') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:39:34.279486', '2024-11-06 09:39:34.279486') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:39:34.282739', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106093932)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093932'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:39:36.334750', '2024-11-06 09:39:36.334750') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:39:36.343797', '2024-11-06 09:39:36.343797') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093940)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093940') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093940)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093940'[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093940)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093940') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093940)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106093940'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106093940)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106093940') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106094159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094159') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:41:59.962562' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106094159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106094159'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106094159)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094159') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106094159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106094159'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106094159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1::int]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select ARRAY[$1] && ($2)::bigint[];
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2::int]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 && rb_build(ARRAY[$2]))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       select ($1)::bigint[] && ARRAY[$2];
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT (rb_build(ARRAY[$1]) && $2)
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0216
  $$;
exception
    when duplicate_function then
         null;
    when others then

    get stacked diagnostics
        v_state   = returned_sqlstate,
        v_msg     = message_text,
        v_detail  = pg_exception_detail,
        v_hint    = pg_exception_hint,
        v_context = pg_exception_context;

    raise notice E'Got exception:
        state  : %
        message: %
        detail : %
        hint   : %
        context: %', v_state, v_msg, v_detail, v_hint, v_context;

    raise notice E'Got exception:
        SQLSTATE: %
        SQLERRM: %', SQLSTATE, SQLERRM;

    raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only
end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094159') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106094210)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094210') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106094211)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094211') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094213)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094213') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:42:15.256270', '2024-11-06 09:42:15.256270') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:42:15.266243', '2024-11-06 09:42:15.266243') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:42:15.268945', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094213)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106094213'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:42:17.287530', '2024-11-06 09:42:17.287530') RETURNING "id"[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:42:17.307574', '2024-11-06 09:42:17.307574') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:42:50.491051' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106094256)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094256') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106094257)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094257') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094259)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094259') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:43:01.946058', '2024-11-06 09:43:01.946058') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:43:01.956141', '2024-11-06 09:43:01.956141') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:43:01.959281', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094259)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106094259'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:43:04.021186', '2024-11-06 09:43:04.021186') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:43:04.029647', '2024-11-06 09:43:04.029647') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106094852)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094852') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106094853)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094853') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 09:48:54.922931' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094855)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106094855') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:48:58.045098', '2024-11-06 09:48:58.045098') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:48:58.054419', '2024-11-06 09:48:58.054419') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.8ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 09:48:58.057314', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106094855)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106094855'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 09:49:00.184981', '2024-11-06 09:49:00.184981') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 09:49:00.194485', '2024-11-06 09:49:00.194485') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106105621)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105621') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106105622)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105622') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 10:56:23.836288' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105624)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105624') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:56:26.920309', '2024-11-06 10:56:26.920309') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:56:26.929249', '2024-11-06 10:56:26.929249') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 10:56:26.931869', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105624)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106105624'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:56:28.938830', '2024-11-06 10:56:28.938830') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:56:28.957452', '2024-11-06 10:56:28.957452') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 10:57:14.311243' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (1.0ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106105722)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105722') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106105723)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105723') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105725)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105725') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:57:27.942114', '2024-11-06 10:57:27.942114') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:57:27.952657', '2024-11-06 10:57:27.952657') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 10:57:27.955492', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105725)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106105725'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:57:30.005215', '2024-11-06 10:57:30.005215') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:57:30.014643', '2024-11-06 10:57:30.014643') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 10:57:43.866958' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106105750)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105750') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106105751)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105751') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105753)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105753') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:57:55.408696', '2024-11-06 10:57:55.408696') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:57:55.417928', '2024-11-06 10:57:55.417928') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 10:57:55.420844', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105753)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106105753'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:57:57.531167', '2024-11-06 10:57:57.531167') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:57:57.541009', '2024-11-06 10:57:57.541009') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106105803)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105803') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106105805)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105805') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.5ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 10:58:05.987764' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105807)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106105807') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:58:09.052432', '2024-11-06 10:58:09.052432') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:58:09.061563', '2024-11-06 10:58:09.061563') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 10:58:09.064456', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106105807)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106105807'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 10:58:11.066452', '2024-11-06 10:58:11.066452') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 10:58:11.075741', '2024-11-06 10:58:11.075741') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106110217)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.8ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106110217') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106110218)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106110218') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:02:19.220258' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106110220)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106110220') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:02:22.292170', '2024-11-06 11:02:22.292170') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:02:22.302871', '2024-11-06 11:02:22.302871') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 11:02:22.305904', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106110220)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106110220'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:02:24.339037', '2024-11-06 11:02:24.339037') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:02:24.348517', '2024-11-06 11:02:24.348517') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:04:34.767337' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (10.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:41:37.166486' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.8ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:44:09.000926' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106114415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114415') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106114416)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114416') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106114418)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114418') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:44:20.567581', '2024-11-06 11:44:20.567581') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:44:20.576510', '2024-11-06 11:44:20.576510') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 11:44:20.579635', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106114418)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106114418'[0m
  [1m[36mTRANSACTION (9.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:44:22.679931', '2024-11-06 11:44:22.679931') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:44:22.689940', '2024-11-06 11:44:22.689940') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106114452)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114452') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106114453)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114453') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:44:54.402358' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106114455)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106114455') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:44:57.722870', '2024-11-06 11:44:57.722870') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:44:57.732632', '2024-11-06 11:44:57.732632') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 11:44:57.735721', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106114455)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106114455'[0m
  [1m[36mTRANSACTION (10.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:44:59.867173', '2024-11-06 11:44:59.867173') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:44:59.877359', '2024-11-06 11:44:59.877359') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.0ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.0ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:52:35.918390' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106115245)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115245') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106115246)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115246') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106115248)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115248') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:52:50.664997', '2024-11-06 11:52:50.664997') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:52:50.673998', '2024-11-06 11:52:50.673998') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 11:52:50.676846', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106115248)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106115248'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:52:52.772450', '2024-11-06 11:52:52.772450') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:52:52.781837', '2024-11-06 11:52:52.781837') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106115338)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115338') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106115339)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115339') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 11:53:40.473239' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106115341)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106115341') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:53:43.612628', '2024-11-06 11:53:43.612628') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:53:43.622520', '2024-11-06 11:53:43.622520') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 11:53:43.625438', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.6ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106115341)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106115341'[0m
  [1m[36mTRANSACTION (9.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 11:53:45.680904', '2024-11-06 11:53:45.680904') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 11:53:45.689865', '2024-11-06 11:53:45.689865') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106120010)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106120010') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106120011)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106120011') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 12:00:12.592042' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106120013)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106120013') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:00:15.742009', '2024-11-06 12:00:15.742009') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:00:15.752218', '2024-11-06 12:00:15.752218') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 12:00:15.755170', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (9.6ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106120013)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106120013'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:00:17.837639', '2024-11-06 12:00:17.837639') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:00:17.847987', '2024-11-06 12:00:17.847987') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 12:13:25.654182' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (3.9ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (2.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (3.1ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (2.0ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106121335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106121336)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121336') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121338)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121338') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:13:40.395076', '2024-11-06 12:13:40.395076') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:13:40.405764', '2024-11-06 12:13:40.405764') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 12:13:40.409025', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121338)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106121338'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:13:42.484568', '2024-11-06 12:13:42.484568') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:13:42.494217', '2024-11-06 12:13:42.494217') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106121410)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121410') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106121412)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121412') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.5ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 12:14:13.213654' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121414)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121414') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:14:16.489840', '2024-11-06 12:14:16.489840') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:14:16.501193', '2024-11-06 12:14:16.501193') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 12:14:16.505274', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121414)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106121414'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:14:18.851812', '2024-11-06 12:14:18.851812') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:14:18.863191', '2024-11-06 12:14:18.863191') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.1ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 12:15:49.156724' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106121558)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121558') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106121559)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121559') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121601)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106121601') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:16:03.757855', '2024-11-06 12:16:03.757855') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:16:03.768891', '2024-11-06 12:16:03.768891') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 12:16:03.772306', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106121601)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106121601'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 12:16:05.912112', '2024-11-06 12:16:05.912112') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 12:16:05.922241', '2024-11-06 12:16:05.922241') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 13:59:30.151703' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106140035)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106140035') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106140036)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106140036') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106140039)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106140039') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:00:41.099801', '2024-11-06 14:00:41.099801') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:00:41.109465', '2024-11-06 14:00:41.109465') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.9ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 14:00:41.112543', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106140039)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106140039'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:00:43.192009', '2024-11-06 14:00:43.192009') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:00:43.200986', '2024-11-06 14:00:43.200986') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 14:03:39.340811' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 14:47:52.909735' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106144804)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144804') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106144805)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144805') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106144807)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144807') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:48:09.588096', '2024-11-06 14:48:09.588096') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:48:09.598226', '2024-11-06 14:48:09.598226') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 14:48:09.601329', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106144807)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106144807'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:48:11.755751', '2024-11-06 14:48:11.755751') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:48:11.765260', '2024-11-06 14:48:11.765260') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 14:49:22.646174' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106144933)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144933') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106144934)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144934') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106144936)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106144936') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:49:38.946867', '2024-11-06 14:49:38.946867') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:49:38.956832', '2024-11-06 14:49:38.956832') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 14:49:38.959980', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106144936)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106144936'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 14:49:41.002432', '2024-11-06 14:49:41.002432') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 14:49:41.011733', '2024-11-06 14:49:41.011733') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106150640)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106150640)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106150640)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106150640)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151327)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151327)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151327)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151327)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106151401)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151401') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106151402)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151402') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:14:03.880352' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151404)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151404') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:14:07.013942', '2024-11-06 15:14:07.013942') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:14:07.024222', '2024-11-06 15:14:07.024222') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:14:07.027068', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151404)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151404'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:14:09.099052', '2024-11-06 15:14:09.099052') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:14:09.109458', '2024-11-06 15:14:09.109458') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (10.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:17:58.696820' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106151809)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151809') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106151811)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151811') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151813)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151813') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:18:15.223062', '2024-11-06 15:18:15.223062') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:18:15.232739', '2024-11-06 15:18:15.232739') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:18:15.236464', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151813)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151813'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:18:17.431482', '2024-11-06 15:18:17.431482') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:18:17.442946', '2024-11-06 15:18:17.442946') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106151902)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151902') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106151904)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151904') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:19:05.074838' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151906)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151906') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:19:08.240149', '2024-11-06 15:19:08.240149') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:19:08.250224', '2024-11-06 15:19:08.250224') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:19:08.253732', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106151906)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151906'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:19:10.344151', '2024-11-06 15:19:10.344151') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:19:10.354013', '2024-11-06 15:19:10.354013') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2))
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:23:51.593599' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106152403)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152403') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106152404)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152404') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152406)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152406') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:24:08.319929', '2024-11-06 15:24:08.319929') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:24:08.330441', '2024-11-06 15:24:08.330441') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:24:08.333433', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152406)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152406'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:24:10.451542', '2024-11-06 15:24:10.451542') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:24:10.461571', '2024-11-06 15:24:10.461571') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106152441)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152441') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106152442)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152442') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:24:43.592201' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152444)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152444') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:24:46.774609', '2024-11-06 15:24:46.774609') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:24:46.784298', '2024-11-06 15:24:46.784298') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:24:46.787769', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152444)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152444'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:24:48.886976', '2024-11-06 15:24:48.886976') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:24:48.897314', '2024-11-06 15:24:48.897314') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:26:33.871628' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106152646)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152646') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106152647)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152647') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152649)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152649') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:26:51.555012', '2024-11-06 15:26:51.555012') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:26:51.564852', '2024-11-06 15:26:51.564852') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:26:51.568021', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152649)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152649'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:26:53.665874', '2024-11-06 15:26:53.665874') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:26:53.675198', '2024-11-06 15:26:53.675198') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106152720)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152720') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106152721)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152721') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:27:22.130156' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152723)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152723') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:27:25.408502', '2024-11-06 15:27:25.408502') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:27:25.418720', '2024-11-06 15:27:25.418720') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:27:25.422096', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106152723)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152723'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:27:27.506280', '2024-11-06 15:27:27.506280') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:27:27.515187', '2024-11-06 15:27:27.515187') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106151360'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106151360)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;

      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    err_sqlstate   TEXT;
    err_message     TEXT;
    err_detail  TEXT;
    err_hint    TEXT;
    err_context TEXT;
    err_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    WHEN OTHERS THEN
      GET STACKED DIAGNOSTICS err_sqlstate = RETURNED_SQLSTATE,
                              err_message = MESSAGE_TEXT,
                              err_detail = PG_EXCEPTION_DETAIL,
                              err_hint = PG_EXCEPTION_HINT,
                              err_context = PG_EXCEPTION_CONTEXT,
                              err_schema_name = SCHEMA_NAME;
end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'message_text', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0218
  $$;
exception
    when duplicate_function then
         null;
    when others then
      get stacked diagnostics
          v_state   = returned_sqlstate,
          v_msg     = message_text,
          v_detail  = pg_exception_detail,
          v_hint    = pg_exception_hint,
          v_context = pg_exception_context;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %', v_state, v_msg, v_detail, v_hint, v_context;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', message_text; -- invalid. message_text is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106151360') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:28:10.345307' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      --SELECT $2 @> $1::int
      raise notice E'Got exceptionzzz'
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      --SELECT $2 @> $1::int
      raise notice E'Got exceptionzzz'
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      --SELECT $2 @> $1::int
      raise notice E'Got exceptionzzz'
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106153957)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106153957') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106153958)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106153958') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:39:59.822790' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154000)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154000') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:40:02.975521', '2024-11-06 15:40:02.975521') RETURNING "id"[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:40:02.994363', '2024-11-06 15:40:02.994363') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:40:02.997360', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154000)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154000'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:40:05.083562', '2024-11-06 15:40:05.083562') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:40:05.093612', '2024-11-06 15:40:05.093612') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154046)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154046') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154047)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154047') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:40:48.818403' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154049)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154049') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:40:51.993946', '2024-11-06 15:40:51.993946') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:40:52.004035', '2024-11-06 15:40:52.004035') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:40:52.007337', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154049)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154049'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:40:54.123267', '2024-11-06 15:40:54.123267') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:40:54.141796', '2024-11-06 15:40:54.141796') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:42:02.542947' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (2.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154212)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154212') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154213)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154213') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:42:17.474361', '2024-11-06 15:42:17.474361') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:42:17.484770', '2024-11-06 15:42:17.484770') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:42:17.488631', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154215'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:42:19.619174', '2024-11-06 15:42:19.619174') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:42:19.629155', '2024-11-06 15:42:19.629155') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154409)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154409') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154410)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154410') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:44:11.397493' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154412)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154412') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:44:14.588353', '2024-11-06 15:44:14.588353') RETURNING "id"[0m
  [1m[36mTRANSACTION (7.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:44:14.605767', '2024-11-06 15:44:14.605767') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:44:14.608549', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154412)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154412'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:44:16.685142', '2024-11-06 15:44:16.685142') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:44:16.694266', '2024-11-06 15:44:16.694266') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.8ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:45:13.162050' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (9.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (10.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154525)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154525') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154526)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154526') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154529') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:45:31.177581', '2024-11-06 15:45:31.177581') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.7ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:45:31.188727', '2024-11-06 15:45:31.188727') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:45:31.192206', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154529)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154529'[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:45:33.394490', '2024-11-06 15:45:33.394490') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:45:33.408597', '2024-11-06 15:45:33.408597') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154614)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154614') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154615)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154615') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:46:16.381321' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (9.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154617)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154617') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:46:19.574164', '2024-11-06 15:46:19.574164') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:46:19.584545', '2024-11-06 15:46:19.584545') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:46:19.587724', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154617)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154617'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:46:21.661658', '2024-11-06 15:46:21.661658') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:46:21.671346', '2024-11-06 15:46:21.671346') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:49:08.103131' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106154919)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154919') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106154920)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154920') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154922)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106154922') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:49:24.875032', '2024-11-06 15:49:24.875032') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:49:24.888178', '2024-11-06 15:49:24.888178') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.7ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:49:24.892748', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.7ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106154922)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106154922'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:49:27.005846', '2024-11-06 15:49:27.005846') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:49:27.015344', '2024-11-06 15:49:27.015344') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:52:35.165914' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106155247)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155247') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106155248)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155248') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155251)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155251') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:52:53.151932', '2024-11-06 15:52:53.151932') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:52:53.162347', '2024-11-06 15:52:53.162347') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:52:53.166027', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155251)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106155251'[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:52:55.264368', '2024-11-06 15:52:55.264368') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:52:55.273792', '2024-11-06 15:52:55.273792') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106155313)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155313') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106155314)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155314') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.5ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:53:15.831890' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155316)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155316') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:53:19.032285', '2024-11-06 15:53:19.032285') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:53:19.041837', '2024-11-06 15:53:19.041837') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:53:19.044882', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155316)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106155316'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:53:21.146361', '2024-11-06 15:53:21.146361') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:53:21.156083', '2024-11-06 15:53:21.156083') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106155405)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155405') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106155406)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155406') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:54:07.642193' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155408)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155408') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:54:10.834479', '2024-11-06 15:54:10.834479') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:54:10.844439', '2024-11-06 15:54:10.844439') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:54:10.847576', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155408)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106155408'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:54:12.959471', '2024-11-06 15:54:12.959471') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:54:12.977519', '2024-11-06 15:54:12.977519') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (1.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (2.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106155858)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155858') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106155859)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155859') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 15:59:00.074178' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155901)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106155901') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:59:03.200140', '2024-11-06 15:59:03.200140') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:59:03.210086', '2024-11-06 15:59:03.210086') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 15:59:03.213151', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106155901)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106155901'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 15:59:05.309403', '2024-11-06 15:59:05.309403') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 15:59:05.318461', '2024-11-06 15:59:05.318461') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:03:06.223877' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106160318)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160318') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106160320)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160320') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160322)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160322') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:03:24.303776', '2024-11-06 16:03:24.303776') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:03:24.313998', '2024-11-06 16:03:24.313998') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:03:24.316912', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160322)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106160322'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:03:26.545164', '2024-11-06 16:03:26.545164') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:03:26.556713', '2024-11-06 16:03:26.556713') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106160354)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160354') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106160355)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160355') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:03:56.624171' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160357)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160357') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:03:59.735283', '2024-11-06 16:03:59.735283') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:03:59.745363', '2024-11-06 16:03:59.745363') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:03:59.748717', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160357)
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106160357'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:04:01.817224', '2024-11-06 16:04:01.817224') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:04:01.826486', '2024-11-06 16:04:01.826486') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (10.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (4.9ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.7ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106152806'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106152806)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
     SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

-- ToDo add error to logger
--     err_jsonb := jsonb_build_object(
--       'returned_sqlstate', v_sqlstate,
--       'MESSAGE_TEXT', v_message,
--       'pg_exception_detail', v_detail,
--       'pg_exception_hint', v_hint,
--       'pg_exception_context', v_context,
--       'schema_name', v_schema_name,
--       'table_name', v_table_name
--     );

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
declare
    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
    v_schema_name TEXT;
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0219
  $$;
exception
    when duplicate_function then
         null;
    when others then
      GET STACKED DIAGNOSTICS v_state = RETURNED_SQLSTATE,
                              v_msg = MESSAGE_TEXT,
                              v_detail = PG_EXCEPTION_DETAIL,
                              v_hint = PG_EXCEPTION_HINT,
                              v_context = PG_EXCEPTION_CONTEXT,
                              v_schema_name = SCHEMA_NAME;
      raise notice E'Got exception:
          state  : %
          message: %
          detail : %
          hint   : %
          context: %
          schema : %', v_state, v_msg, v_detail, v_hint, v_context, v_schema_name;
      raise notice E'Got exception:
          SQLSTATE: %
          SQLERRM: %', SQLSTATE, SQLERRM;
      raise notice '%', MESSAGE_TEXT; -- invalid. MESSAGE_TEXT is contextual to GET STACKED DIAGNOSTICS only

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106152806') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106160424)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160424') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106160426)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160426') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:04:27.021266' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160428)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160428') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:04:30.272896', '2024-11-06 16:04:30.272896') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:04:30.282731', '2024-11-06 16:04:30.282731') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:04:30.285751', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160428)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106160428'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:04:32.467974', '2024-11-06 16:04:32.467974') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:04:32.478570', '2024-11-06 16:04:32.478570') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:05:36.873839' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106160548)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160548') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106160549)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160549') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160551)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106160551') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:05:53.362355', '2024-11-06 16:05:53.362355') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:05:53.374464', '2024-11-06 16:05:53.374464') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:05:53.378567', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106160551)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106160551'[0m
  [1m[36mTRANSACTION (10.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:05:55.450902', '2024-11-06 16:05:55.450902') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:05:55.459937', '2024-11-06 16:05:55.459937') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106160938)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap'
end; $pl$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106160938)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap'
end; $pl$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106160938)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap'
end; $pl$;
[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106160938)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap'
end; $pl$;
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:12:17.017697' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161215'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0220
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161215'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0220
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161229)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161229') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161231)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161231') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161233)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161233') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:12:35.313615', '2024-11-06 16:12:35.313615') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:12:35.324205', '2024-11-06 16:12:35.324205') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:12:35.328069', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161233)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161233'[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:12:37.445634', '2024-11-06 16:12:37.445634') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:12:37.455915', '2024-11-06 16:12:37.455915') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:13:18.865715' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161215'[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.2ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0220
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161215'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161215)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0220
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161215') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161331)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161331') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161332)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161332') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161334)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161334') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:13:36.964441', '2024-11-06 16:13:36.964441') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:13:36.974670', '2024-11-06 16:13:36.974670') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:13:36.978138', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161334)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161334'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:13:39.073498', '2024-11-06 16:13:39.073498') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:13:39.083431', '2024-11-06 16:13:39.083431') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161401)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161401') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161402)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161402') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:14:03.577284' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161404)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161404') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:14:06.826351', '2024-11-06 16:14:06.826351') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:14:06.835941', '2024-11-06 16:14:06.835941') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:14:06.839222', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161404)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161404'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:14:09.035400', '2024-11-06 16:14:09.035400') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:14:09.045267', '2024-11-06 16:14:09.045267') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241106161414)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161414') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161415'[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161415'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (1.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161435)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161435') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161436)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161436') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:14:37.301448' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161438)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161438') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:14:40.541571', '2024-11-06 16:14:40.541571') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:14:40.551138', '2024-11-06 16:14:40.551138') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:14:40.553757', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161438)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161438'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:14:42.702939', '2024-11-06 16:14:42.702939') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:14:42.713004', '2024-11-06 16:14:42.713004') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161523)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161523') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161524)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161524') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:15:25.582043' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161526)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161526') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:15:28.756225', '2024-11-06 16:15:28.756225') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:15:28.766262', '2024-11-06 16:15:28.766262') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:15:28.769204', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161526)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161526'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:15:30.841317', '2024-11-06 16:15:30.841317') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:15:30.850104', '2024-11-06 16:15:30.850104') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161808)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161808') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161810)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161810') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:18:11.010838' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161812)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161812') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.8ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:18:14.401906', '2024-11-06 16:18:14.401906') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:18:14.414316', '2024-11-06 16:18:14.414316') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:18:14.417888', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161812)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161812'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:18:16.571234', '2024-11-06 16:18:16.571234') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:18:16.580805', '2024-11-06 16:18:16.580805') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241106161414)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161414') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateMovies (20241106161837)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161837') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161838)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161838') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:18:39.561118' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161840)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161840') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:18:42.752881', '2024-11-06 16:18:42.752881') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:18:42.763266', '2024-11-06 16:18:42.763266') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:18:42.766640', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161840)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161840'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:18:44.851064', '2024-11-06 16:18:44.851064') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:18:44.860996', '2024-11-06 16:18:44.860996') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161415'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161415'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106161919)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161919') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106161920)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161920') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:19:21.701222' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161922)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161922') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:19:24.980113', '2024-11-06 16:19:24.980113') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:19:24.990663', '2024-11-06 16:19:24.990663') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:19:24.994627', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106161922)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161922'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:19:27.121771', '2024-11-06 16:19:27.121771') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:19:27.133079', '2024-11-06 16:19:27.133079') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161917)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161917'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161917)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0222
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161917') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161917)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106161917'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106161917)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0222
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161917') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106162013)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162013') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162014)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162014') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:20:15.250783' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (1.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162016)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162016') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (4.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:20:18.544547', '2024-11-06 16:20:18.544547') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:20:18.554980', '2024-11-06 16:20:18.554980') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:20:18.558110', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162016)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162016'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:20:20.739406', '2024-11-06 16:20:20.739406') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:20:20.749886', '2024-11-06 16:20:20.749886') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106162108)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162108') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162109)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162109') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:21:10.885127' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162112)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162112') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:21:14.171956', '2024-11-06 16:21:14.171956') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:21:14.183160', '2024-11-06 16:21:14.183160') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:21:14.195667', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162112)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162112'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:21:16.365221', '2024-11-06 16:21:16.365221') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:21:16.377748', '2024-11-06 16:21:16.377748') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106162158)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162158') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162159)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162159') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:22:00.536407' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162201)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162201') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:22:03.747680', '2024-11-06 16:22:03.747680') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:22:03.757613', '2024-11-06 16:22:03.757613') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:22:03.760563', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162201)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162201'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:22:05.921161', '2024-11-06 16:22:05.921161') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:22:05.931426', '2024-11-06 16:22:05.931426') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:22:48.314038' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106162257)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162257') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162258)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162258') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162300)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162300') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:23:02.925765', '2024-11-06 16:23:02.925765') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:23:02.935028', '2024-11-06 16:23:02.935028') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:23:02.937775', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162300)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162300'[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:23:05.074180', '2024-11-06 16:23:05.074180') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:23:05.084513', '2024-11-06 16:23:05.084513') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241106161414)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161414') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241106161415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0221
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106161415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateMovies (20241106162332)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162332') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162333)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.8ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162333') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:23:34.538938' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:23:37.696357', '2024-11-06 16:23:37.696357') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:23:37.707263', '2024-11-06 16:23:37.707263') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:23:37.710259', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.6ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162335'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:23:39.806084', '2024-11-06 16:23:39.806084') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:23:39.815072', '2024-11-06 16:23:39.815072') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241106162412)
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162412') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241106162413)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162413') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-06 16:24:14.321943' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162415') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:24:17.596707', '2024-11-06 16:24:17.596707') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:24:17.606446', '2024-11-06 16:24:17.606446') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-06 16:24:17.609406', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.7ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241106162415)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162415'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-06 16:24:19.747708', '2024-11-06 16:24:19.747708') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-06 16:24:19.757880', '2024-11-06 16:24:19.757880') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106162410)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162410'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106162410)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0223
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162410') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106162410)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241106162410'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241106162410)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0223
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106162410') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107051930)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107051930') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107051931)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107051931') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:19:32.750594' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107051933)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107051933') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:19:35.926213', '2024-11-07 05:19:35.926213') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:19:35.935327', '2024-11-07 05:19:35.935327') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:19:35.937910', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107051933)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107051933'[0m
  [1m[36mTRANSACTION (9.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:19:38.007854', '2024-11-07 05:19:38.007854') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:19:38.018143', '2024-11-07 05:19:38.018143') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107052014)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.0ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107052014') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107052015)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107052015') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:20:16.471102' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107052017)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107052017') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:20:19.597205', '2024-11-07 05:20:19.597205') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:20:19.607986', '2024-11-07 05:20:19.607986') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:20:19.611311', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107052017)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107052017'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:20:21.682528', '2024-11-07 05:20:21.682528') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:20:21.691979', '2024-11-07 05:20:21.691979') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (1.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:38:13.125975' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107053811)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107053811'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107053811)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053811') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107053811)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107053811'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107053811)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053811') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107053825)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.2ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053825') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107053826)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053826') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107053828)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053828') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:38:30.913651', '2024-11-07 05:38:30.913651') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:38:30.923433', '2024-11-07 05:38:30.923433') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:38:30.926857', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107053828)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107053828'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:38:33.099891', '2024-11-07 05:38:33.099891') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:38:33.109692', '2024-11-07 05:38:33.109692') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:38:54.154584' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107053905)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053905') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107053906)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053906') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107053908)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107053908') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:39:10.603914', '2024-11-07 05:39:10.603914') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:39:10.613339', '2024-11-07 05:39:10.613339') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:39:10.616381', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (8.6ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107053908)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107053908'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:39:12.680544', '2024-11-07 05:39:12.680544') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:39:12.690598', '2024-11-07 05:39:12.690598') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:39:54.356905' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107054005)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054005') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107054006)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054006') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054008)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054008') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:40:10.759119', '2024-11-07 05:40:10.759119') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:40:10.768742', '2024-11-07 05:40:10.768742') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:40:10.771650', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (10.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.5ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054008)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107054008'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:40:12.909063', '2024-11-07 05:40:12.909063') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:40:12.919059', '2024-11-07 05:40:12.919059') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107054046)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054046') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107054047)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054047') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:40:48.411148' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054049)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054049') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:40:51.572755', '2024-11-07 05:40:51.572755') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:40:51.581652', '2024-11-07 05:40:51.581652') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:40:51.584321', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054049)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107054049'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:40:53.641096', '2024-11-07 05:40:53.641096') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:40:53.649871', '2024-11-07 05:40:53.649871') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107054243)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054243') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107054244)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054244') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:42:45.357492' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054246)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107054246') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:42:48.490948', '2024-11-07 05:42:48.490948') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:42:48.502450', '2024-11-07 05:42:48.502450') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:42:48.505732', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (9.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107054246)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107054246'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:42:50.590410', '2024-11-07 05:42:50.590410') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:42:50.600717', '2024-11-07 05:42:50.600717') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:50:03.517748' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107055012)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055012') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107055013)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055013') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055016)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055016') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:50:18.213338', '2024-11-07 05:50:18.213338') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:50:18.224205', '2024-11-07 05:50:18.224205') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:50:18.227967', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055016)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055016'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:50:20.406326', '2024-11-07 05:50:20.406326') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:50:20.416240', '2024-11-07 05:50:20.416240') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241106182601)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106182601') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241106182602)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0225
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241106182602') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:50:40.769065' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107055051)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055051') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107055053)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (10.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055053') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055055)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055055') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:50:57.214461', '2024-11-07 05:50:57.214461') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:50:57.223548', '2024-11-07 05:50:57.223548') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:50:57.226508', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055055)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055055'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:50:59.293589', '2024-11-07 05:50:59.293589') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:50:59.302460', '2024-11-07 05:50:59.302460') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107055154)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055154') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107055155)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055155') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 05:51:56.545652' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055157)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055157') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:51:59.666367', '2024-11-07 05:51:59.666367') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:51:59.676114', '2024-11-07 05:51:59.676114') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 05:51:59.679425', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107055157)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055157'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 05:52:01.740320', '2024-11-07 05:52:01.740320') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 05:52:01.750166', '2024-11-07 05:52:01.750166') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055153'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055153') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055153'[0m
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.9ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055153') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107094148)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107094148') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107094149)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107094149') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.4ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 09:41:50.247353' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107094151)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107094151') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 09:41:53.332484', '2024-11-07 09:41:53.332484') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 09:41:53.341999', '2024-11-07 09:41:53.341999') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 09:41:53.344700', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107094151)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107094151'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 09:41:55.385680', '2024-11-07 09:41:55.385680') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 09:41:55.394418', '2024-11-07 09:41:55.394418') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055153'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055153') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107055153'[0m
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107055153)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0226
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107055153') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 09:53:04.112829' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107095316)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095316') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107095317)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095317') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107095319)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095319') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 09:53:21.493068', '2024-11-07 09:53:21.493068') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 09:53:21.504312', '2024-11-07 09:53:21.504312') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 09:53:21.507750', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107095319)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095319'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 09:53:23.583047', '2024-11-07 09:53:23.583047') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 09:53:23.592879', '2024-11-07 09:53:23.592879') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-07 16:51:31.166724' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241107165143)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.8ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107165143') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.3ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241107165144)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107165144') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107165146)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107165146') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 16:51:48.588044', '2024-11-07 16:51:48.588044') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 16:51:48.607400', '2024-11-07 16:51:48.607400') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.5ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-07 16:51:48.611272', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.8ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241107165146)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107165146'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-07 16:51:50.797845', '2024-11-07 16:51:50.797845') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-07 16:51:50.808294', '2024-11-07 16:51:50.808294') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:11:38.833749' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108101150)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101150') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108101152)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.5ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101152') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101154)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101154') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:11:56.252229', '2024-11-08 10:11:56.252229') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:11:56.271268', '2024-11-08 10:11:56.271268') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:11:56.274596', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101154)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101154'[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:11:58.496114', '2024-11-08 10:11:58.496114') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:11:58.505228', '2024-11-08 10:11:58.505228') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108101226)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101226') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108101228)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101228') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:12:28.975494' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101230)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101230') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.8ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:12:32.218424', '2024-11-08 10:12:32.218424') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.8ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:12:32.231179', '2024-11-08 10:12:32.231179') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:12:32.236379', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101230)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101230'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:12:34.328784', '2024-11-08 10:12:34.328784') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:12:34.338698', '2024-11-08 10:12:34.338698') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (9.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.5ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:13:08.355819' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241107095260'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241107095260)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
       select $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
      SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
      SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
       select $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
       SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
      SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241107095260') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108101321)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101321') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108101322)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101322') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101324)
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.8ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101324') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:13:27.151017', '2024-11-08 10:13:27.151017') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:13:27.160422', '2024-11-08 10:13:27.160422') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:13:27.163465', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101324)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101324'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:13:29.306870', '2024-11-08 10:13:29.306870') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:13:29.315909', '2024-11-08 10:13:29.315909') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101355)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101355)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101355)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101355)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101511)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101511)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101511)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101511)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;rb_max
[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[31mROLLBACK[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:15:32.351984' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101530)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101530'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101530)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.8ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (1.1ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0228
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101530') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101530)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101530'[0m
  [1m[36mTRANSACTION (10.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108101530)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';
end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0228
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101530') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108101545)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101545') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108101546)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101546') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101548)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108101548') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:15:50.889077', '2024-11-08 10:15:50.889077') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:15:50.898669', '2024-11-08 10:15:50.898669') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:15:50.901762', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108101548)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108101548'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:15:53.149122', '2024-11-08 10:15:53.149122') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:15:53.159264', '2024-11-08 10:15:53.159264') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:21:14.383436' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108102126)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102126') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108102127)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.6ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102127') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108102129)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102129') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.7ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:21:31.791468', '2024-11-08 10:21:31.791468') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.6ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:21:31.802873', '2024-11-08 10:21:31.802873') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:21:31.807063', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108102129)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108102129'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:21:33.946396', '2024-11-08 10:21:33.946396') RETURNING "id"[0m
  [1m[36mTRANSACTION (10.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:21:33.967160', '2024-11-08 10:21:33.967160') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108102228)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.5ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102228') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108102229)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102229') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.2ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:22:30.250483' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108102231)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108102231') RETURNING "version"[0m
  [1m[36mTRANSACTION (1.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.8ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:22:33.504049', '2024-11-08 10:22:33.504049') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:22:33.514706', '2024-11-08 10:22:33.514706') RETURNING "id"[0m
  [1m[36mTRANSACTION (1.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:22:33.518784', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108102231)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.5ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108102231'[0m
  [1m[36mTRANSACTION (1.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:22:35.701993', '2024-11-08 10:22:35.701993') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:22:35.711876', '2024-11-08 10:22:35.711876') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:27:22.814960' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:27:57.077884' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:28:12.242631' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.3ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:33:39.207990' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0229
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0229
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108103352)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.9ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103352') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108103353)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103353') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108103356)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103356') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:33:58.234647', '2024-11-08 10:33:58.234647') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.7ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:33:58.246215', '2024-11-08 10:33:58.246215') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:33:58.250467', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108103356)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103356'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:34:00.371196', '2024-11-08 10:34:00.371196') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:34:00.381050', '2024-11-08 10:34:00.381050') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Update (0.5ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2024-11-08 10:37:55.488518' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5028.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (19.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (18.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (24.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (31.8ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (11.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (31.0ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5037.3ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5020.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5035.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241108103334)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103334') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_max_bitmap(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_max_bitmap(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_max_bitmap';

end; $pl$;
[0m
  [1m[35m (0.2ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0229
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5033.0ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (7.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5036.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (1.0ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5029.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5029.5ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5038.2ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (1.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5030.2ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5035.0ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (1.0ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.0ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5037.5ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108105910)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108105910') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108105911)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.9ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108105911') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108105913)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.6ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108105913') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:59:16.168388', '2024-11-08 10:59:16.168388') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:59:16.178842', '2024-11-08 10:59:16.178842') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 10:59:16.182173', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (10.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108105913)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108105913'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 10:59:18.392879', '2024-11-08 10:59:18.392879') RETURNING "id"[0m
  [1m[36mTRANSACTION (12.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 10:59:18.415635', '2024-11-08 10:59:18.415635') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108105910)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.2ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108105910'[0m
  [1m[36mTRANSACTION (3.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108105911)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108105911'[0m
  [1m[36mTRANSACTION (3.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5031.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108110354)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110354') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108110355)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.0ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110355') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108110357)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110357') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:03:59.766549', '2024-11-08 11:03:59.766549') RETURNING "id"[0m
  [1m[36mTRANSACTION (10.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.5ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:03:59.787241', '2024-11-08 11:03:59.787241') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:03:59.791535', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108110357)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110357'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:04:02.054379', '2024-11-08 11:04:02.054379') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:04:02.065801', '2024-11-08 11:04:02.065801') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108110354)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.1ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110354'[0m
  [1m[36mTRANSACTION (12.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108110355)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110355'[0m
  [1m[36mTRANSACTION (3.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5031.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (1.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108110537)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110537') RETURNING "version"[0m
  [1m[36mTRANSACTION (8.9ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108110538)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110538') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108110540)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108110540') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:05:42.857255', '2024-11-08 11:05:42.857255') RETURNING "id"[0m
  [1m[36mTRANSACTION (9.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:05:42.876745', '2024-11-08 11:05:42.876745') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:05:42.879971', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.4ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108110540)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110540'[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:05:45.036670', '2024-11-08 11:05:45.036670') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:05:45.046839', '2024-11-08 11:05:45.046839') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108110537)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110537'[0m
  [1m[36mTRANSACTION (3.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108110538)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108110538'[0m
  [1m[36mTRANSACTION (12.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.9ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108112359)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.7ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112359') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108112400)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112400') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108112402)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112402') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.4ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:24:04.542719', '2024-11-08 11:24:04.542719') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:24:04.552038', '2024-11-08 11:24:04.552038') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:24:04.555012', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108112402)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112402'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:24:06.686828', '2024-11-08 11:24:06.686828') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:24:06.699623', '2024-11-08 11:24:06.699623') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108112359)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112359'[0m
  [1m[36mTRANSACTION (4.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108112400)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112400'[0m
  [1m[36mTRANSACTION (11.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5028.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108112433)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.1ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.8ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112433') RETURNING "version"[0m
  [1m[36mTRANSACTION (2.9ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108112434)
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (6.3ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (1.9ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112434') RETURNING "version"[0m
  [1m[36mTRANSACTION (4.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.1ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108112437)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108112437') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:24:39.216673', '2024-11-08 11:24:39.216673') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:24:39.226469', '2024-11-08 11:24:39.226469') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.3ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:24:39.229396', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108112437)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112437'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:24:41.338610', '2024-11-08 11:24:41.338610') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:24:41.351170', '2024-11-08 11:24:41.351170') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108112433)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112433'[0m
  [1m[36mTRANSACTION (3.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108112434)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108112434'[0m
  [1m[36mTRANSACTION (13.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.9ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5025.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113021)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (3.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113021') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108113023)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113023') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113025)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113025') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.6ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:30:27.338356', '2024-11-08 11:30:27.338356') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.4ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:30:27.349117', '2024-11-08 11:30:27.349117') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:30:27.352138', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113025)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113025'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:30:29.473609', '2024-11-08 11:30:29.473609') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:30:29.482661', '2024-11-08 11:30:29.482661') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113021)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113021'[0m
  [1m[36mTRANSACTION (3.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108113023)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113023'[0m
  [1m[36mTRANSACTION (12.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (6.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (21.8ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (14.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (13.9ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (14.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (14.8ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5041.9ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_testzzz"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (4.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113512)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113512') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108113514)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (12.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113514') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113516)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113516') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:35:18.634791', '2024-11-08 11:35:18.634791') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:35:18.644783', '2024-11-08 11:35:18.644783') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:35:18.648532', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.3ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113516)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113516'[0m
  [1m[36mTRANSACTION (9.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:35:20.785699', '2024-11-08 11:35:20.785699') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:35:20.795126', '2024-11-08 11:35:20.795126') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113512)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113512'[0m
  [1m[36mTRANSACTION (3.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108113514)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113514'[0m
  [1m[36mTRANSACTION (3.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5035.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_testzzz"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(3419722662663699105)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(3419722662663699105)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.9ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113821)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.4ms)[0m  [1m[35mCREATE TABLE "movies" ("id" bigserial primary key, "title" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113821') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
Migrating to CreateActors (20241108113822)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (2.1ms)[0m  [1m[35mCREATE TABLE "actors" ("id" bigserial primary key, "name" text, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113822') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113825)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "movies" ADD "actor_ids" roaringbitmap DEFAULT NULL[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108113825') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.5ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:38:27.135854', '2024-11-08 11:38:27.135854') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.3ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:38:27.145006', '2024-11-08 11:38:27.145006') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mMovie Update (0.4ms)[0m  [1m[33mUPDATE "movies" SET "updated_at" = '2024-11-08 11:38:27.147690', "actor_ids" = '\x3a3000000100000000000000100000000100' WHERE "movies"."id" = 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_build(ARRAY[1]);[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mMovie Load (0.2ms)[0m  [1m[34mSELECT "movies".* FROM "movies" WHERE "movies"."id" = 1 LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT rb_to_array('\x3a3000000100000000000000100000000100');[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddRoaringFkeyActorIdsToMovies (20241108113825)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "movies" DROP COLUMN "actor_ids"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113825'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mMovie Create (0.3ms)[0m  [1m[32mINSERT INTO "movies" ("title", "created_at", "updated_at") VALUES ('Elm street', '2024-11-08 11:38:29.281644', '2024-11-08 11:38:29.281644') RETURNING "id"[0m
  [1m[36mTRANSACTION (10.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActor Create (0.2ms)[0m  [1m[32mINSERT INTO "actors" ("name", "created_at", "updated_at") VALUES ('mr Duddle', '2024-11-08 11:38:29.302384', '2024-11-08 11:38:29.302384') RETURNING "id"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateMovies (20241108113821)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "movies"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113821'[0m
  [1m[36mTRANSACTION (3.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateActors (20241108113822)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "actors"[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108113822'[0m
  [1m[36mTRANSACTION (3.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5040.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.5ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5031.9ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5028.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5031.4ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (6.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (1.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (1.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241108103334)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103334') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.9ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (10.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.6ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (10.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (10.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108103335'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108103335)
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0227
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108103335') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5025.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20241108131528)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108131528') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20241108131529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS count(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS max(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS min(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION count(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_cardinality($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION max(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION min(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_min($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func min(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0230
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108131529') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5033.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5026.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108131529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS count(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS max(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS min(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108131529'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108131529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS count(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS max(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS min(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (1.0ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION count(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_cardinality($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION max(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION min(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_min($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func min(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0230
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108131529') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108131529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP FUNCTION IF EXISTS count(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS max(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS min(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.4ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20241108131529'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20241108131529)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS count(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS max(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS min(roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION count(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_cardinality($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION max(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_max($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION min(roaringbitmap)
  returns int language sql immutable as $$
    SELECT rb_min($1)
  $$;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func min(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0230
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20241108131529') RETURNING "version"[0m
  [1m[36mTRANSACTION (9.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5029.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5033.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (25.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (7.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (9.1ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.7ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5024.1ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5033.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5032.5ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (1.0ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to EnableRoaringbitmap (20250115062842)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  [1m[35mCREATE EXTENSION IF NOT EXISTS "roaringbitmap"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250115062842') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
Migrating to RoaringFkeyInstall (20250115062843)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_count(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_max(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_min(integer, roaringbitmap) CASCADE;
[0m
  [1m[35m (4.1ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0233
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_count(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT $1+rb_cardinality($2)
  $$;

  CREATE aggregate count (roaringbitmap) (
      sfunc = roaringbitmap_count,
      stype = integer,
      initcond = 0
  );
  --alter aggregate count (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_max(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT GREATEST($1, rb_max($2))
  $$;

  CREATE aggregate max (roaringbitmap) (
      sfunc = roaringbitmap_max,
      stype = integer,
      initcond = 0
  );
  --alter aggregate max (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_min(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT LEAST($1, rb_max($2))
  $$;

  CREATE aggregate min (roaringbitmap) (
      sfunc = roaringbitmap_min,
      stype = integer,
      initcond = 0
  );
  --alter aggregate min (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_min(roaringbitmap)';

end; $pl$;
[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250115062843') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.8ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20250115062843)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (11.2ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_count(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_max(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_min(integer, roaringbitmap) CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.8ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250115062843'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20250115062843)
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_count(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_max(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_min(integer, roaringbitmap) CASCADE;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (11.0ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0233
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[35m (0.7ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_count(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT $1+rb_cardinality($2)
  $$;

  CREATE aggregate count (roaringbitmap) (
      sfunc = roaringbitmap_count,
      stype = integer,
      initcond = 0
  );
  --alter aggregate count (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_max(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT GREATEST($1, rb_max($2))
  $$;

  CREATE aggregate max (roaringbitmap) (
      sfunc = roaringbitmap_max,
      stype = integer,
      initcond = 0
  );
  --alter aggregate max (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_min(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT LEAST($1, rb_max($2))
  $$;

  CREATE aggregate min (roaringbitmap) (
      sfunc = roaringbitmap_min,
      stype = integer,
      initcond = 0
  );
  --alter aggregate min (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_min(roaringbitmap)';

end; $pl$;
[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250115062843') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20250115062843)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.9ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_count(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_max(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_min(integer, roaringbitmap) CASCADE;
[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.3ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250115062843'[0m
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RoaringFkeyInstall (20250115062843)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_contains_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bigint_eq_int_array(bigint, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_contains_int(roaringbitmap, integer) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[]) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_array_contains_bigint(integer[], bigint) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaring_fkey_version() CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_count(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_max(integer, roaringbitmap) CASCADE;
DROP FUNCTION IF EXISTS roaringbitmap_min(integer, roaringbitmap) CASCADE;
[0m
  [1m[35m (0.6ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_in_bitmap(bigint, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1::int
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = roaringbitmap,
      procedure = roaring_fkey_bigint_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_in_bitmap';
end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_contains_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2)
  $$;

  CREATE OPERATOR = (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_contains_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_contains_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bigint_eq_int_array(bigint, integer[])
  returns boolean language sql immutable as $$
    SELECT $1::int = ANY($2);
  $$;

  CREATE OPERATOR == (leftarg = bigint, rightarg = integer[],
      procedure = roaring_fkey_bigint_eq_int_array,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bigint_eq_int_array';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_bigint(roaringbitmap, bigint)
  returns boolean language sql immutable as $$
    SELECT $1 @> $2::int
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = bigint,
      procedure = roaring_fkey_bitmap_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_contains_int(roaringbitmap, integer)
  returns boolean language sql immutable as $$
    SELECT ($1 @> $2)
  $$;

  CREATE OPERATOR = (leftarg = roaringbitmap, rightarg = integer,
      procedure = roaring_fkey_bitmap_contains_int,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_contains_int';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_bitmap_overlaps_array_int(roaringbitmap, integer[])
  returns boolean language sql immutable as $$
    SELECT $1 && (rb_build($2));
  $$;

  CREATE OPERATOR && (leftarg = roaringbitmap, rightarg = integer[],
      procedure = roaring_fkey_bitmap_overlaps_array_int,
      commutator = &&);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_bitmap_overlaps_array_int';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_array_contains_bigint(integer[], bigint)
  returns boolean language sql immutable as $$
    SELECT $2::int = ANY($1)
  $$;

  CREATE OPERATOR = (leftarg = integer[], rightarg = bigint,
      procedure = roaring_fkey_int_array_contains_bigint,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_array_contains_bigint';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaring_fkey_int_contains_in_bitmap(integer, roaringbitmap)
  returns boolean language sql immutable as $$
    SELECT $2 @> $1
  $$;

  CREATE OPERATOR == (leftarg = integer, rightarg = roaringbitmap,
      procedure = roaring_fkey_int_contains_in_bitmap,
      commutator = =);

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_int_contains_in_bitmap';

end; $pl$;

[0m
  [1m[35m (0.3ms)[0m  [1m[35mdo $pl$
begin
  CREATE FUNCTION roaring_fkey_version()
    returns int language sql immutable as $$
        SELECT 0233
  $$;
exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: func roaring_fkey_version';

end; $pl$;

[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_count(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT $1+rb_cardinality($2)
  $$;

  CREATE aggregate count (roaringbitmap) (
      sfunc = roaringbitmap_count,
      stype = integer,
      initcond = 0
  );
  --alter aggregate count (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_count(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.5ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_max(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT GREATEST($1, rb_max($2))
  $$;

  CREATE aggregate max (roaringbitmap) (
      sfunc = roaringbitmap_max,
      stype = integer,
      initcond = 0
  );
  --alter aggregate max (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_max(roaringbitmap)';

end; $pl$;
[0m
  [1m[35m (0.4ms)[0m  [1m[35mdo $pl$
begin

  CREATE FUNCTION roaringbitmap_min(integer, roaringbitmap)
  returns int language sql immutable as $$
    SELECT LEAST($1, rb_max($2))
  $$;

  CREATE aggregate min (roaringbitmap) (
      sfunc = roaringbitmap_min,
      stype = integer,
      initcond = 0
  );
  --alter aggregate min (roaringbitmap) owner to postgres;

exception
    when duplicate_function then
         null;
    when others then
      raise notice E'Got exception: roaring_fkey func roaringbitmap_min(roaringbitmap)';

end; $pl$;
[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250115062843') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5027.7ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.9ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5028.9ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5025.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.5ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5036.6ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.7ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "ar_internal_metadata"."value" FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[35m (5077.8ms)[0m  [1m[35mDROP DATABASE IF EXISTS "roaring_fkey_test"[0m
  [1m[35m (0.6ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.4ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34m              SELECT roaring_fkey_version();
[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.3ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT 5::bigint = ARRAY[5][0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(2889357478352211615)[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.4ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' LIMIT 1[0m
  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_advisory_unlock(2889357478352211615)[0m
